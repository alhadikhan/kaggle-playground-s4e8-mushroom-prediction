{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Loading","metadata":{}},{"cell_type":"code","source":"# Load the datasets\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')\nsample_submission_df = pd.read_csv('/kaggle/input/playground-series-s4e8/sample_submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:40:40.110484Z","iopub.execute_input":"2024-09-04T13:40:40.110904Z","iopub.status.idle":"2024-09-04T13:40:56.909991Z","shell.execute_reply.started":"2024-09-04T13:40:40.110876Z","shell.execute_reply":"2024-09-04T13:40:56.909056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:40:56.911289Z","iopub.execute_input":"2024-09-04T13:40:56.911678Z","iopub.status.idle":"2024-09-04T13:40:56.946288Z","shell.execute_reply.started":"2024-09-04T13:40:56.911642Z","shell.execute_reply":"2024-09-04T13:40:56.945188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample_submission_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:40:56.949702Z","iopub.execute_input":"2024-09-04T13:40:56.950114Z","iopub.status.idle":"2024-09-04T13:40:56.960713Z","shell.execute_reply.started":"2024-09-04T13:40:56.950079Z","shell.execute_reply":"2024-09-04T13:40:56.959605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Missing Values Check & Data Overview","metadata":{}},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:40:56.968985Z","iopub.execute_input":"2024-09-04T13:40:56.969327Z","iopub.status.idle":"2024-09-04T13:41:01.967751Z","shell.execute_reply.started":"2024-09-04T13:40:56.969298Z","shell.execute_reply":"2024-09-04T13:41:01.966455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:01.969136Z","iopub.execute_input":"2024-09-04T13:41:01.969482Z","iopub.status.idle":"2024-09-04T13:41:01.984510Z","shell.execute_reply.started":"2024-09-04T13:41:01.969451Z","shell.execute_reply":"2024-09-04T13:41:01.983121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Encoding Categorical Features","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Encode categorical features\nlabel_encoders = {}\nfor column in train_df.columns:\n    if train_df[column].dtype == 'object':\n        le = LabelEncoder()\n        train_df[column] = le.fit_transform(train_df[column].astype(str))\n        label_encoders[column] = le\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:01.986016Z","iopub.execute_input":"2024-09-04T13:41:01.986377Z","iopub.status.idle":"2024-09-04T13:41:24.863509Z","shell.execute_reply.started":"2024-09-04T13:41:01.986336Z","shell.execute_reply":"2024-09-04T13:41:24.862219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:24.864964Z","iopub.execute_input":"2024-09-04T13:41:24.865434Z","iopub.status.idle":"2024-09-04T13:41:24.895200Z","shell.execute_reply.started":"2024-09-04T13:41:24.865396Z","shell.execute_reply":"2024-09-04T13:41:24.893946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Correlation Matrix","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Calculate correlation matrix\ncorr_matrix = train_df.corr()\n\n# Plot the correlation heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')\nplt.show()\n\n# Correlation with the target variable 'class'\ncorr_with_class = corr_matrix['class'].sort_values(ascending=False)\nprint(corr_with_class)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:24.897386Z","iopub.execute_input":"2024-09-04T13:41:24.897816Z","iopub.status.idle":"2024-09-04T13:41:31.141067Z","shell.execute_reply.started":"2024-09-04T13:41:24.897778Z","shell.execute_reply":"2024-09-04T13:41:31.139871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df_temp=train_df","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:31.142500Z","iopub.execute_input":"2024-09-04T13:41:31.142838Z","iopub.status.idle":"2024-09-04T13:41:31.147820Z","shell.execute_reply.started":"2024-09-04T13:41:31.142809Z","shell.execute_reply":"2024-09-04T13:41:31.146611Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Imputation & Feature Selection","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score\n\n# Drop irrelevant features\ntrain_df_temp.drop(columns=['id'], inplace=True)\n\n# Impute missing values for relevant features\nmean_imputer = SimpleImputer(strategy='mean')\nknn_imputer = KNNImputer(n_neighbors=5)\n\ntrain_df_temp['stem-width'] = knn_imputer.fit_transform(train_df_temp[['stem-width']])\ntrain_df_temp['cap-diameter'] = mean_imputer.fit_transform(train_df_temp[['cap-diameter']])\n\n# Drop features with excessive missing values\ntrain_df_temp.drop(columns=['stem-root', 'veil-type', 'spore-print-color', 'gill-spacing'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:31.151561Z","iopub.execute_input":"2024-09-04T13:41:31.151893Z","iopub.status.idle":"2024-09-04T13:41:33.233350Z","shell.execute_reply.started":"2024-09-04T13:41:31.151864Z","shell.execute_reply":"2024-09-04T13:41:33.232092Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train-Test Split","metadata":{}},{"cell_type":"code","source":"# Split the data\nX = train_df_temp.drop(columns=['class'])\ny = train_df_temp['class']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df_temp","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:33.234658Z","iopub.execute_input":"2024-09-04T13:41:33.234996Z","iopub.status.idle":"2024-09-04T13:41:33.260814Z","shell.execute_reply.started":"2024-09-04T13:41:33.234966Z","shell.execute_reply":"2024-09-04T13:41:33.259556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model Training with Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\n# Initialize the RandomForestClassifier with verbose parameter set to 2\nmodel = RandomForestClassifier(n_estimators=100, random_state=42, verbose=2)\n\n# Fit the model\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T13:41:33.262367Z","iopub.execute_input":"2024-09-04T13:41:33.262754Z","iopub.status.idle":"2024-09-04T14:02:41.293615Z","shell.execute_reply.started":"2024-09-04T13:41:33.262723Z","shell.execute_reply":"2024-09-04T14:02:41.292110Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Save the Model","metadata":{}},{"cell_type":"code","source":"import joblib\n# Save the trained model to a file\njoblib.dump(model, 'random_forest_model.pkl')\nprint(\"Model saved successfully as 'random_forest_model.pkl'.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-04T14:02:41.295541Z","iopub.execute_input":"2024-09-04T14:02:41.295989Z","iopub.status.idle":"2024-09-04T14:02:42.199164Z","shell.execute_reply.started":"2024-09-04T14:02:41.295947Z","shell.execute_reply":"2024-09-04T14:02:42.197990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preprocessing Test Data","metadata":{}},{"cell_type":"code","source":"test_df = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')\ntest_df","metadata":{"execution":{"iopub.status.busy":"2024-09-04T14:02:42.200787Z","iopub.execute_input":"2024-09-04T14:02:42.201182Z","iopub.status.idle":"2024-09-04T14:02:51.001332Z","shell.execute_reply.started":"2024-09-04T14:02:42.201151Z","shell.execute_reply":"2024-09-04T14:02:50.999817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to transform with handling unseen labels\ndef safe_transform(column, le):\n    # Map unseen labels to -1\n    return column.apply(lambda x: le.transform([x])[0] if x in le.classes_ else -1)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T14:02:51.002756Z","iopub.execute_input":"2024-09-04T14:02:51.003149Z","iopub.status.idle":"2024-09-04T15:11:23.678421Z","shell.execute_reply.started":"2024-09-04T14:02:51.003119Z","shell.execute_reply":"2024-09-04T15:11:23.676795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply the same label encoding to the test data\nprint(\"Applying label encoding to test data...\")\nfor column, le in label_encoders.items():\n    if column in test_df.columns:\n        test_df[column] = safe_transform(test_df[column].astype(str), le)\n        print(f\"Transformed column: {column}\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply the same imputation steps to the test data\nprint(\"Applying imputations to test data...\")\ntest_df['stem-width'] = knn_imputer.transform(test_df[['stem-width']])\nprint(\"Imputed missing values in 'stem-width'.\")\ntest_df['cap-diameter'] = mean_imputer.transform(test_df[['cap-diameter']])\nprint(\"Imputed missing values in 'cap-diameter'.\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save the id column before dropping\ntest_ids = test_df['id']\n\n# Check for remaining missing values in the test data\nmissing_columns = test_df.columns[test_df.isnull().any()].tolist()\nif missing_columns:\n    print(f\"Warning: The following columns still have missing values: {missing_columns}\")\n    # Optionally, fill remaining missing values with mean, median, or a constant\n    test_df.fillna(test_df.mean(), inplace=True)\n    print(\"Remaining missing values have been filled.\")\n\n# Drop the columns that are not used for prediction, including 'id'\ncolumns_to_drop = ['stem-root', 'veil-type', 'spore-print-color', 'gill-spacing', 'id']\nexisting_columns_to_drop = [col for col in columns_to_drop if col in test_df.columns]\nif existing_columns_to_drop:\n    print(f\"Dropping columns: {existing_columns_to_drop}\")\n    test_df.drop(columns=existing_columns_to_drop, inplace=True)\nelse:\n    print(\"No columns to drop.\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Prediction on Test Data","metadata":{}},{"cell_type":"code","source":"# Predict on the test data\nprint(\"Predicting on test data...\")\npredictions = model.predict(test_df)\nprint(\"Predictions completed.\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Prepare the submission file using the saved 'id' values\nsubmission = pd.DataFrame({'id': test_ids, 'class': predictions})\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission file created successfully.\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s_df = pd.read_csv('/kaggle/working/submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:39:31.745074Z","iopub.execute_input":"2024-09-04T15:39:31.745698Z","iopub.status.idle":"2024-09-04T15:39:32.292683Z","shell.execute_reply.started":"2024-09-04T15:39:31.745662Z","shell.execute_reply":"2024-09-04T15:39:32.291456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s_df","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:39:38.258865Z","iopub.execute_input":"2024-09-04T15:39:38.259501Z","iopub.status.idle":"2024-09-04T15:39:38.272446Z","shell.execute_reply.started":"2024-09-04T15:39:38.259464Z","shell.execute_reply":"2024-09-04T15:39:38.271387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating Submission File","metadata":{}},{"cell_type":"code","source":"# Define a mapping from numerical values to labels\nclass_mapping = {1: 'p', 0: 'e'}\n\n# Apply the mapping to the 'class' column\nsubmission['class'] = submission['class'].map(class_mapping)\n\n# Save the updated submission file\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission file updated with correct class labels.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:43:50.211084Z","iopub.execute_input":"2024-09-04T15:43:50.211553Z","iopub.status.idle":"2024-09-04T15:43:53.189951Z","shell.execute_reply.started":"2024-09-04T15:43:50.211518Z","shell.execute_reply":"2024-09-04T15:43:53.188804Z"},"trusted":true},"execution_count":null,"outputs":[]}]}